---
title: "Data Science for Public Policy"
subtitle: "Assignment 05"
author: "Ruiyang Zhang - rz326"
execute:
  warning: false
format:
  html:
    embed-resources: true
---

## Libraries

```{r}
# Load in libraries
library(tidyverse)
library(purrr)
library(stringr)
library(lubridate)
library(sf)
library(here)
library(patchwork)
library(tidycensus)
```

## Data loading & cleaning

```{r}
crimes <- read_csv(
  "data/crimes-reduced.csv", 
  col_types = cols(
    Latitude=col_character(), 
    Longitude=col_character()
    )
  )

names(crimes) <- names(crimes) %>% 
  str_to_lower() %>% 
  str_replace_all("\\s","_")

```

## Filter the data to homicides within ten years of today

```{r}
crimes_lim <- crimes %>% 
  mutate(date=mdy_hms(crimes$date)) %>% 
  filter(
    !is.na(latitude),
    !is.na(longitude),
    year(date) >= year(Sys.time()) - 10,
    primary_type == "HOMICIDE"
    )

```

## Convert Longitude and Latitude to Points Geometry

```{r}
crimes_lim <- crimes_lim %>% 
  st_as_sf(
    coords = c("longitude", "latitude"),
    remove=F
    ) %>%
  st_set_crs(value = 4326) 

crimes_lim %>% 
ggplot()+
  geom_sf(
    aes(color=arrest),
    alpha=0.3
    )

```
This is the geographical distribution of homicides in Chicago. In most places, arrested cases and unarrested cases mix together.


## Load Census Tracts

```{r}
map_file <- here(
  "data/geo_export_f93d223f-234c-4780-a277-5927903cd9ce.shp"
  )

chi_map <- st_read(map_file, quiet=T) %>%
  st_transform(4326) %>% 
  select(geoid10, geometry)

```

## Spatial Join

```{r}
joint <- st_join(crimes_lim, chi_map) %>% 
  st_drop_geometry()

chicago_merged_agg <- joint %>%
  filter(!is.na(arrest)) %>% 
  group_by(geoid10) %>% 
  summarise(
    count=n(),
    mean=mean(arrest)
      )

chicago_merged_agg <- left_join(
  chicago_merged_agg,
  chi_map,
  by="geoid10"
  ) %>%
  st_as_sf()

```

## Create Choropleth

```{r}
count_graph <- chicago_merged_agg %>% 
  ggplot()+
  geom_sf(
    aes(fill=count),
    color="white",
    size=0.1
    )+
  theme_void() 
  
arr_rate_graph <- chicago_merged_agg %>% 
  ggplot()+
  geom_sf(
    aes(fill=mean),
    color="white",
    size=0.1
    )+
  theme_void()

count_graph + arr_rate_graph

```
This is a map of Chicago. The place north-west to downtown Chicago has higher number of homicide cases, but the arrest rate there is not high. The arrest rate in Chicago is not evenly distributed.

## Iterating API pulls and map creation
### Create a function to get data from ACS and create a choropleth map
```{r}
#' Get data from ACS and create a choropleth map by Tract
#'
#' @param numeric_year 
#' @param census_variable_code 
#' @param variable_name 
#' @param state_fips 
#' @param county_fips 
#'
#' @return a choropleth map
#' @export
#'
#' @examples
data_sfplot_byTract <- function(
    numeric_year,
    census_variable_code,
    variable_name,
    state_fips,
    county_fips){
  
  #turn into characters
  census_variable_code <- as.character(census_variable_code)
  variable_name <- as.character(variable_name)
  state_fips <- as.character(state_fips)
  county_fips <- as.character(county_fips)
  
  #get data
  data <- get_acs(
    geography = "tract",
    year = numeric_year,
    variables = census_variable_code,
    state = state_fips,
    county = county_fips,
    geometry = T
    )
  
  # have a readable map title
  state_name <- str_split_i(data$NAME[1],",",3)
  county_name <- str_split_i(data$NAME[1],",",2)
  title_name <- paste0(
    variable_name,
    " by Tract in", 
    county_name,
    ",",
    state_name)
  
  #create a plot
  plot <- data %>% 
    ggplot(aes(fill=estimate))+
    geom_sf()+
    labs(
      title=title_name,
      fill=variable_name)
  
  # save the plot
  file_name <- paste0("images/",title_name,".jpg")
  ggsave(file_name,plot=plot)
  
  Sys.sleep(0.5)
}

```

## Iteration
```{r}
# create vectors
iteration_df <- data.frame(
  numeric_year = c(2020,2020,2020,2020,2020), 
  #use 2020 because the dataset measures the median income of the year prior to the year when the survey is conducted.
  census_variable_code = c(
    "B19013_001",
    "B19013_001",
    "B19013_001",
    "B19013_001",
    "B19013_001"),
  variable_name = c(
    "Median Household Income in 2019",
    "Median Household Income in 2019",
    "Median Household Income in 2019",
    "Median Household Income in 2019",
    "Median Household Income in 2019"),
  state_fips = c("51","51","51","51","51"),
  county_fips = c("013", "510", "610","710","730"))

pmap_df(iteration_df, .f = data_sfplot_byTract)

```
